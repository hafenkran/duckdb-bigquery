# name: test/sql/bigquery/auth_secrets_scopes.test
# description: Testing DuckDB secrets scope matching and functional authentication for BigQuery
# group: [bigquery]

require bigquery

require-env BQ_TEST_PROJECT

# Test 1: Project-specific scope matching
statement ok
CREATE SECRET project_specific_secret (
    TYPE bigquery,
    PROVIDER config,
    SCOPE 'bigquery://${BQ_TEST_PROJECT}',
    project_id '${BQ_TEST_PROJECT}',
    key_id 'test@test.iam.gserviceaccount.com',
    secret 'test-key'
);

# Verify it matches the specific project
query I
SELECT name FROM which_secret('bigquery://${BQ_TEST_PROJECT}', 'bigquery');
----
project_specific_secret

# Clean up
statement ok
DROP SECRET project_specific_secret;

# Test 2: Wildcard scope matching
statement ok
CREATE SECRET wildcard_secret (
    TYPE bigquery,
    PROVIDER config,
    SCOPE 'bigquery://',
    project_id 'any-project',
    key_id 'test@test.iam.gserviceaccount.com',
    secret 'test-key'
);

# Verify it matches any project
query I
SELECT name FROM which_secret('bigquery://any-random-project', 'bigquery');
----
wildcard_secret

# Verify it also matches our test project
query I
SELECT name FROM which_secret('bigquery://${BQ_TEST_PROJECT}', 'bigquery');
----
wildcard_secret

# Clean up
statement ok
DROP SECRET wildcard_secret;

# Test 3: Scope priority - specific scope should win over wildcard
statement ok
CREATE SECRET wildcard_secret (
    TYPE bigquery,
    PROVIDER config,
    SCOPE 'bigquery://',
    project_id 'any-project',
    key_id 'wildcard@test.iam.gserviceaccount.com',
    secret 'wildcard-key'
);

statement ok
CREATE SECRET specific_secret (
    TYPE bigquery,
    PROVIDER config,
    SCOPE 'bigquery://${BQ_TEST_PROJECT}',
    project_id '${BQ_TEST_PROJECT}',
    key_id 'specific@test.iam.gserviceaccount.com',
    secret 'specific-key'
);

# Specific scope should be preferred
query I
SELECT name FROM which_secret('bigquery://${BQ_TEST_PROJECT}', 'bigquery');
----
specific_secret

# But wildcard should still match other projects
query I
SELECT name FROM which_secret('bigquery://other-project', 'bigquery');
----
wildcard_secret

# Clean up
statement ok
DROP SECRET specific_secret;

statement ok
DROP SECRET wildcard_secret;

# Test 4: Functional authentication with project-specific scope
require-env BQ_TEST_DATASET

require-env BQ_SERVICE_ACCOUNT_JSON

# Create a project-specific secret with real credentials
statement ok
CREATE SECRET project_auth_secret (
    TYPE bigquery,
    PROVIDER service_account,
    SCOPE 'bigquery://${BQ_TEST_PROJECT}',
    json '${BQ_SERVICE_ACCOUNT_JSON}'
);

# Verify the secret is registered
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE type = 'bigquery' AND name = 'project_auth_secret';
----
1

# Verify which secret will be used
query I
SELECT name FROM which_secret('bigquery://${BQ_TEST_PROJECT}', 'bigquery');
----
project_auth_secret

# Attach using the project-specific secret (should automatically pick it up)
statement ok
ATTACH 'project=${BQ_TEST_PROJECT} dataset=${BQ_TEST_DATASET}' AS bq_project (TYPE bigquery);

# Verify authentication works
statement ok
USE bq_project;

statement ok
SHOW ALL TABLES;

# Clean up
statement ok
DROP SECRET project_auth_secret;

# Test 5: Functional authentication with wildcard scope
statement ok
CREATE SECRET wildcard_auth_secret (
    TYPE bigquery,
    PROVIDER service_account,
    SCOPE 'bigquery://',
    json '${BQ_SERVICE_ACCOUNT_JSON}'
);

# Verify it matches our project
query I
SELECT name FROM which_secret('bigquery://${BQ_TEST_PROJECT}', 'bigquery');
----
wildcard_auth_secret

# Attach using the wildcard secret
statement ok
ATTACH 'project=${BQ_TEST_PROJECT} dataset=${BQ_TEST_DATASET}' AS bq_wildcard (TYPE bigquery);

# Verify authentication works
statement ok
USE bq_wildcard;

statement ok
SHOW ALL TABLES;

# Clean up
statement ok
DROP SECRET wildcard_auth_secret;

# Test 6: Multiple secrets with priority - specific scope wins
statement ok
CREATE SECRET wildcard_backup (
    TYPE bigquery,
    PROVIDER service_account,
    SCOPE 'bigquery://',
    json '${BQ_SERVICE_ACCOUNT_JSON}'
);

statement ok
CREATE SECRET project_priority (
    TYPE bigquery,
    PROVIDER service_account,
    SCOPE 'bigquery://${BQ_TEST_PROJECT}',
    json '${BQ_SERVICE_ACCOUNT_JSON}'
);

# Verify project-specific secret is chosen
query I
SELECT name FROM which_secret('bigquery://${BQ_TEST_PROJECT}', 'bigquery');
----
project_priority

# Attach should use the project-specific secret
statement ok
ATTACH 'project=${BQ_TEST_PROJECT} dataset=${BQ_TEST_DATASET}' AS bq_priority (TYPE bigquery);

# Verify authentication works with the prioritized secret
statement ok
USE bq_priority;

statement ok
SHOW ALL TABLES;

# Clean up
statement ok
DROP SECRET project_priority;

statement ok
DROP SECRET wildcard_backup;

