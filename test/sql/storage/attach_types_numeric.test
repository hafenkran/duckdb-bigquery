# name: test/sql/storage/attach_types_numeric.test
# description: Test inserting various numeric types
# group: [storage]

require bigquery

require-env BQ_TEST_PROJECT

require-env BQ_TEST_DATASET

statement ok
ATTACH 'project=${BQ_TEST_PROJECT} dataset=${BQ_TEST_DATASET}' AS bq (TYPE bigquery);

###########################################
# test multiple numeric types
###########################################
statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.table_numerics;

statement ok
CREATE TABLE bq.${BQ_TEST_DATASET}.table_numerics AS
SELECT
    bool,
    tinyint,
    smallint,
    int,
    bigint,
    utinyint,
    usmallint,
    uint,
    float,
    double,
FROM test_all_types();

query IIIIIIIIII
SELECT * FROM bq.${BQ_TEST_DATASET}.table_numerics;
----
false	-128	-32768	-2147483648	-9223372036854775808	0	0	0	-3.4028235e+38	-1.7976931348623157e+308
true	127	32767	2147483647	9223372036854775807	255	65535	4294967295	3.4028235e+38	1.7976931348623157e+308
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL

statement ok
DROP TABLE bq.${BQ_TEST_DATASET}.table_numerics;

###########################################
# HUGEINT, UHUGEINT, UBIGINT (not supported)
###########################################
statement error
CREATE TABLE bq.${BQ_TEST_DATASET}.hugeint_table (h HUGEINT);
----
Not implemented Error: HUGEINT not supported in BigQuery.

statement error
CREATE TABLE bq.${BQ_TEST_DATASET}.uhugeint_table (h UHUGEINT);
----
Not implemented Error: UHUGEINT not supported in BigQuery.

statement error
CREATE TABLE bq.${BQ_TEST_DATASET}.ubigint_table (h UBIGINT);
----
Not implemented Error: UBIGINT not supported in BigQuery.


###########################################
# NUMERIC test
###########################################
statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.numeric_table;

statement ok
CREATE OR REPLACE TABLE bq.${BQ_TEST_DATASET}.numeric_table (
	numeric_column DECIMAL(38, 9),
	numeric_list DECIMAL(38, 9)[]
);

statement ok
INSERT INTO bq.${BQ_TEST_DATASET}.numeric_table
VALUES (
    CAST(12345.678901234 AS DECIMAL(38, 9)),
    [
        CAST(123.45 AS DECIMAL(38, 9)),
        CAST(6789.01 AS DECIMAL(38, 9)),
        CAST(234.56 AS DECIMAL(38, 9))
    ]
);

query II
SELECT * FROM bq.${BQ_TEST_DATASET}.numeric_table;
----
12345.678901234	[123.450000000, 6789.010000000, 234.560000000]

statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.numeric_table;

statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.numeric_table2;

statement ok
CALL bigquery_execute('${BQ_TEST_PROJECT}', 'CREATE OR REPLACE TABLE `${BQ_TEST_PROJECT}.${BQ_TEST_DATASET}.numeric_table2` AS
SELECT
    CAST(12345.678901234 AS NUMERIC) AS numeric_column,
    [CAST(123.45 AS NUMERIC), CAST(6789.01 AS NUMERIC), CAST(234.56 AS NUMERIC)] AS numeric_list');

statement ok
CALL bigquery_clear_cache();

query II
SELECT * FROM bq.${BQ_TEST_DATASET}.numeric_table2;
----
12345.678901234	[123.450000000, 6789.010000000, 234.560000000]

statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.numeric_table2;


###########################################
# BIGNUMERIC test
###########################################
statement ok
SET bq_bignumeric_as_varchar=FALSE

statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.bignumeric_table;

statement ok
CALL bigquery_execute('${BQ_TEST_PROJECT}', 'CREATE OR REPLACE TABLE `${BQ_TEST_PROJECT}.${BQ_TEST_DATASET}.bignumeric_table` AS
SELECT
    CAST(12345.678901234 AS BIGNUMERIC) AS numeric_column');

statement ok
CALL bigquery_clear_cache();

query I
SELECT table_name FROM information_schema.tables WHERE table_schema='${BQ_TEST_DATASET}' AND table_name='bignumeric_table';
----

statement ok
SET bq_bignumeric_as_varchar=TRUE

statement ok
SET bq_use_legacy_scan=true

statement ok
CALL bigquery_clear_cache();

query I
SELECT * FROM bq.${BQ_TEST_DATASET}.bignumeric_table;
----
12345.67890123400000000000000000000000000000

statement ok
DROP TABLE IF EXISTS bq.${BQ_TEST_DATASET}.bignumeric_table;

statement ok
SET bq_bignumeric_as_varchar=FALSE

statement ok
SET bq_use_legacy_scan=false
